plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.5'
    id 'io.spring.dependency-management' version '1.1.3'
    id 'dev.hilla' version '2.1.9'
}

group = 'com.palestiner'
version = '0.0.1'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('hillaVersion', "2.1.9")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'dev.hilla:hilla-react-spring-boot-starter'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

dependencyManagement {
    imports {
        mavenBom "dev.hilla:hilla-bom:${hillaVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

bootBuildImage {
    def defaultRegistry = 'palestiner'
    String REGISTRY = defaultRegistry
    ext {
        File envFile = file('.env') as File
        if (envFile.exists()) {
            def dotEnvProps = new Properties()
            envFile.withInputStream { dotEnvProps.load(it) }
            dotEnvProps.entrySet().forEach { set(it.key as String, it.value) }
            REGISTRY = dotEnvProps.get('REGISTRY') ?: defaultRegistry
        }
    }
    environment['BP_JVM_VERSION'] = java.sourceCompatibility.toString()
    imageName = "${REGISTRY}/${rootProject.name}:${version}"
    hilla {
        productionMode = true
    }
}
